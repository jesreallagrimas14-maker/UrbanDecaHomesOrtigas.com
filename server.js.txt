// server.js
const express = require('express');
const nodemailer = require('nodemailer');
const path = require('path');

require('dotenv').config(); // optional if you use .env

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Optional: serve index.html if you place it in same folder
app.use(express.static(path.join(__dirname, '.')));

// REST endpoint to receive form data
app.post('/submit', async (req, res) => {
  try {
    const { name, email, phone, message, role, toEmail } = req.body;

    // Basic validation
    if (!name || !email) {
      return res.status(400).json({ error: 'Name and email required.' });
    }

    // The recipient - override from front-end to server-configured TO_EMAIL (security)
    const recipient = process.env.TO_EMAIL || toEmail || "jesreal.lagrimas14@gmail.com";

    // Create transporter using SMTP environment variables
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,            // e.g. smtp.gmail.com
      port: parseInt(process.env.SMTP_PORT || '587', 10),
      secure: process.env.SMTP_SECURE === 'true', // true for 465, false for other ports
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    // Compose email
    const mailOptions = {
      from: `"Website Contact" <${process.env.SMTP_USER}>`,
      to: recipient,
      subject: `New contact from ${role || 'Website'}: ${name}`,
      text:
`You received a new message from the Urban Deca Homes form.

Name: ${name}
Email: ${email}
Phone: ${phone || '-'}
Role: ${role || '-'}
Message:
${message || '-'}

-- End of message
`,
      html: `
        <h2>New contact from Urban Deca Homes</h2>
        <p><strong>Name:</strong> ${name}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>Phone:</strong> ${phone || '-'}</p>
        <p><strong>Role:</strong> ${role || '-'}</p>
        <p><strong>Message:</strong><br/>${(message || '-').replace(/\n/g, '<br/>')}</p>
      `,
    };

    // Send email
    await transporter.sendMail(mailOptions);

    return res.json({ ok: true, message: 'Email sent.' });
  } catch (err) {
    console.error('Error sending email:', err);
    return res.status(500).json({ error: 'Failed to send email.' });
  }
});

app.listen(PORT, () => {
  console.log(`Server listening on http://localhost:${PORT}`);
});
